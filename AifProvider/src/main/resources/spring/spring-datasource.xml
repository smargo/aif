<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd          
      http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
      http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
      http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">

	<bean id="aifDataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName">
			<value>${aif.jdbc.driverClass}</value>
		</property>
		<property name="url">
			<value>${aif.jdbc.url}</value>
		</property>
		<property name="username">
			<value>${aif.jdbc.user}</value>
		</property>
		<property name="password">
			<value>${aif.jdbc.password}</value>
		</property>

		<property name="maxActive">
			<value>${aif.dataSource.maxActive}</value>
		</property>

		<property name="maxIdle">
			<value>${aif.dataSource.maxIdle}</value>
		</property>
		<property name="initialSize">
			<value>${aif.dataSource.initialSize}</value>
		</property>

		<property name="testWhileIdle" value="true" />

		<property name="removeAbandoned" value="true"/>

		<property name="removeAbandonedTimeout" value="180"/>

		<property name="validationQuery">
			<value>${aif.datasource.validationQuery}</value>
		</property>
	</bean>

	<bean id="aifTransactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="aifDataSource" />
	</bean>

	<!-- define the SqlSessionFactory -->
	<bean id="aifSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="aifDataSource" />
		<property name="configLocation" value="classpath:/aif-mybatis/mybatis-config.xml" />
		<property name="mapperLocations" value="classpath*:/aif-mybatis/mapper/*.xml" />
	</bean>

	<aop:config>
		<aop:pointcut id="aifTxOperation" expression="execution(* com.smargo.dubbo..*Impl.*(..))" />
		<aop:advisor pointcut-ref="aifTxOperation" advice-ref="aifTxAdvice" />
	</aop:config>

	<tx:advice id="aifTxAdvice" transaction-manager="aifTransactionManager">
		<tx:attributes>
			<tx:method name="get*" propagation="SUPPORTS" read-only="true"
				no-rollback-for="java.lang.Exception" />
			<tx:method name="check*" propagation="SUPPORTS" read-only="true"
				no-rollback-for="java.lang.Exception" />
			<tx:method name="list*" propagation="SUPPORTS" read-only="true"
				no-rollback-for="java.lang.Exception" />
			<tx:method name="query*" propagation="SUPPORTS" read-only="true" 
				no-rollback-for="java.lang.Exception" />
			<tx:method name="is*" propagation="SUPPORTS" read-only="true"
				no-rollback-for="java.lang.Exception" />
			<tx:method name="*InNewTrx" propagation="REQUIRES_NEW" />
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice>
	
	<!-- 演示使用scanner方式 -->
	<!-- 自动扫描了所有的XxxxMapper.java，这样就不用一个一个手动配置Mpper的映射了，只要Mapper接口类和Mapper映射文件对应起来就可以了。 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.**.dubbo.**.dao"/>
        <property name="sqlSessionFactoryBeanName" value="aifSqlSessionFactory" />
    </bean>
</beans>